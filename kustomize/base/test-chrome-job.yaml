apiVersion: batch/v1
kind: Job
metadata:
  name: selenium-test-job
  labels:
    app: selenium-tests
spec:
  # Configuración del job
  completions: 1
  parallelism: 1
  backoffLimit: 3
  ttlSecondsAfterFinished: 300  # Limpiar después de 5 minutos

  template:
    metadata:
      labels:
        app: selenium-tests
    spec:
      restartPolicy: Never
      containers:
      - name: selenium-test
        image: python:3.11-slim
        imagePullPolicy: IfNotPresent
        
        # Variables de entorno
        env:
        - name: HUB_URL
          value: "http://selenium-hub:4444/wd/hub"  # Ajusta según tu hub
        - name: TEST_URL
          value: "https://www.google.com"
        
        # Comando a ejecutar
        command: ["/bin/bash"]
        args:
        - -c
        - |
          echo "Instalando dependencias..."
          pip install selenium pytest requests
          
          echo "Creando script de prueba..."
          cat > test_simple.py << 'EOF'
          import os
          import time
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
          
          def test_google_search():
              print("Iniciando prueba...")
              
              # Configurar capabilities para Chrome
              caps = DesiredCapabilities.CHROME.copy()
              caps['browserName'] = 'chrome'
              
              # URL del hub
              hub_url = os.getenv('HUB_URL', 'http://localhost:4444/wd/hub')
              test_url = os.getenv('TEST_URL', 'https://www.google.com')
              
              print(f"Conectando a hub: {hub_url}")
              
              # Crear driver remoto
              driver = webdriver.Remote(
                  command_executor=hub_url,
                  desired_capabilities=caps
              )
              
              try:
                  print(f"Navegando a: {test_url}")
                  driver.get(test_url)
                  
                  # Esperar a que cargue la página
                  wait = WebDriverWait(driver, 10)
                  
                  # Buscar el campo de búsqueda
                  search_box = wait.until(
                      EC.presence_of_element_located((By.NAME, "q"))
                  )
                  
                  # Realizar búsqueda
                  search_term = "Selenium WebDriver"
                  print(f"Buscando: {search_term}")
                  search_box.send_keys(search_term)
                  search_box.submit()
                  
                  # Esperar resultados
                  wait.until(
                      EC.presence_of_element_located((By.ID, "search"))
                  )
                  
                  print(f"Título de la página: {driver.title}")
                  
                  # Verificar que hay resultados
                  results = driver.find_elements(By.CSS_SELECTOR, "h3")
                  print(f"Encontrados {len(results)} resultados")
                  
                  assert len(results) > 0, "No se encontraron resultados"
                  print("✅ Prueba completada exitosamente!")
                  
              except Exception as e:
                  print(f"❌ Error en la prueba: {str(e)}")
                  raise
              finally:
                  print("Cerrando navegador...")
                  driver.quit()
          
          if __name__ == "__main__":
              test_google_search()
          EOF
          
          echo "Ejecutando prueba..."
          python test_simple.py
          
          echo "Prueba completada!"
        
        # Recursos del contenedor
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"